{"version":3,"sources":["Counter/Control/Control.module.scss","Counter/DisplayWithSettings/DisplayWithSettings.module.scss","Counter/Input/Input.module.scss","Counter/Display/Display.tsx","Counter/Control/Control.tsx","Counter/Input/Input.tsx","Counter/DisplayWithSettings/DisplayWithSettings.tsx","Redux/counter-reducer.ts","Redux/counterSetting-reducer.ts","Counter/Counter.tsx","App.tsx","reportWebVitals.ts","Redux/store.ts","index.tsx","Counter/Counter.module.scss","Counter/Display/Display.module.scss"],"names":["module","exports","Display","props","className","s","display","error","errorMessage","count","maxValue","Control","onClick","action","disabled","setDisabled","control","title","Input","setting","label","type","onChange","e","Number","currentTarget","value","DisplayWithSettings","console","log","useSelector","state","counterSettingReducer","newMaxValue","newMinValue","setMax","setMin","SET_COUNTER_VALUES","SET_CURRENT_VALUE","initialState","minValue","currentValue","setCounterValuesAC","setCurrentValueAC","SET_NEW_MAX_VALUE","SET_NEW_MIN_VALUE","setNewMaxValueAC","setNewMinValueAC","Counter","dispatch","useDispatch","counterReducer","useState","isSaved","setIsSaved","setError","useEffect","valueAsString","localStorage","getItem","newValues","JSON","parse","max","min","counterWithSettings","counter","controls","newCounterValues","undefined","setItem","stringify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1510b2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"Control_control__VL0ah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"DisplayWithSettings_display__7_v13\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setting\":\"Input_setting__39zWR\"};","import React from \"react\";\r\nimport s from \"./Display.module.scss\"\r\n\r\nexport type DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    error: string\r\n}\r\nexport const Display = (props: DisplayPropsType) => {\r\n    return <div className={s.display}>\r\n        {props.error\r\n            ? <div className={s.errorMessage}>{props.error}</div>\r\n            : <div className={props.count === props.maxValue ? s.error : \"\"}>{props.count}</div>\r\n        }\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from \"./Control.module.scss\"\r\n\r\nexport type ControlPropsType = {\r\n    title: string\r\n    count: number\r\n    action: () => void\r\n    setDisabled: () => boolean\r\n}\r\nexport const Control = (props: ControlPropsType) => {\r\n\r\n    return <div>\r\n        <button onClick={props.action}\r\n                disabled={props.setDisabled()}\r\n                className={s.control}>\r\n            {props.title}\r\n        </button>\r\n    </div>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './Input.module.scss'\r\n\r\ntype InputPropsType = {\r\n    label: string\r\n    onChange: (value: number) => void\r\n    value: number\r\n}\r\nconst Input = (props: InputPropsType) => {\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => props.onChange(Number(e.currentTarget.value))\r\n\r\n    return (\r\n        <div className={s.setting}>\r\n            <span>{props.label}</span>\r\n            <input type=\"number\"\r\n                   onChange={onChangeHandler}\r\n                   value={props.value}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport s from './DisplayWithSettings.module.scss'\r\nimport Input from \"../Input/Input\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {SettingStateType} from \"../../Redux/counterSetting-reducer\";\r\nimport {AppStateType} from \"../../Redux/store\";\r\n\r\ntype DisplayWithSettingsPropsType = {\r\n    setMax: (value: number) => void\r\n    setMin: (value: number) => void\r\n}\r\nconst DisplayWithSettings = (props: DisplayWithSettingsPropsType) => {\r\n    console.log(\"DisplayWithSettings renders\")\r\n\r\n    const {newMaxValue, newMinValue} = useSelector<AppStateType, SettingStateType>(state => state.counterSettingReducer)\r\n\r\n    const onChangeMaxHandler = (value: number) => {\r\n        props.setMax(value)\r\n    }\r\n    const onChangeMinHandler = (value: number) => {\r\n        props.setMin(value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.display}>\r\n            <Input label=\"max value:\"\r\n                   onChange={onChangeMaxHandler}\r\n                   value={newMaxValue}\r\n\r\n            />\r\n            <Input label=\"min value:\"\r\n                   onChange={onChangeMinHandler}\r\n                   value={newMinValue}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayWithSettings;","export type CounterStateType = {\r\n    maxValue: number,\r\n    minValue: number,\r\n    currentValue: number\r\n}\r\n\r\nconst SET_COUNTER_VALUES = \"SET_COUNTER_VALUES\"\r\nconst SET_CURRENT_VALUE = \"SET_CURRENT_VALUE\";\r\n\r\n\r\nlet initialState = {\r\n    maxValue: 5,\r\n    minValue: 0,\r\n    currentValue: 0\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionValuesType): CounterStateType => {\r\n    switch (action.type) {\r\n        case SET_COUNTER_VALUES:\r\n            return {...state, maxValue: action.maxValue, minValue: action.minValue};\r\n\r\n        case SET_CURRENT_VALUE:\r\n            return {...state, currentValue: action.value};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\ntype SetCurrentValueACType = ReturnType<typeof setCurrentValueAC>\r\ntype SetCounterValuesACType = ReturnType<typeof setCounterValuesAC>\r\n\r\nexport type ActionValuesType =\r\n    SetCounterValuesACType\r\n    | SetCurrentValueACType\r\n\r\nexport const setCounterValuesAC = (maxValue: number, minValue: number) => ({\r\n    type: SET_COUNTER_VALUES,\r\n    maxValue,\r\n    minValue\r\n} as const);\r\n\r\nexport const setCurrentValueAC = (value: number) => ({\r\n    type: SET_CURRENT_VALUE,\r\n    value\r\n} as const);","\r\n\r\nexport type SettingStateType = {\r\n    newMaxValue: number,\r\n    newMinValue: number\r\n}\r\n\r\nconst SET_NEW_MAX_VALUE = \"SET_NEW_MAX_VALUE\";\r\nconst SET_NEW_MIN_VALUE = \"SET_NEW_MIN_VALUE\";\r\n\r\n\r\nlet initialState = {\r\n        newMaxValue: 5,\r\n        newMinValue: 0,\r\n}\r\n\r\nexport const counterSettingReducer = (state: SettingStateType = initialState, action: ActionValuesType): SettingStateType => {\r\n    switch (action.type) {\r\n        case SET_NEW_MAX_VALUE:\r\n            return {...state,  newMaxValue: action.value};\r\n        case SET_NEW_MIN_VALUE:\r\n            return {...state,newMinValue: action.value};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetNewMaxValueACType = ReturnType<typeof setNewMaxValueAC>\r\ntype SetNewMinValueACType = ReturnType<typeof setNewMinValueAC>\r\n\r\n\r\nexport type ActionValuesType = SetNewMaxValueACType | SetNewMinValueACType\r\n\r\nexport const setNewMaxValueAC = (value: number) => ({\r\n    type: SET_NEW_MAX_VALUE,\r\n    value\r\n} as const);\r\n\r\nexport const setNewMinValueAC = (value: number) => ({\r\n    type: SET_NEW_MIN_VALUE,\r\n    value\r\n} as const);\r\n\r\n","import React, {Dispatch, useEffect, useState} from \"react\";\r\nimport {Display} from \"./Display/Display\";\r\nimport s from \"./Counter.module.scss\"\r\nimport {Control} from \"./Control/Control\";\r\nimport DisplayWithSettings from \"./DisplayWithSettings/DisplayWithSettings\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CounterStateType, setCounterValuesAC, setCurrentValueAC} from \"../Redux/counter-reducer\";\r\nimport {AppStateType} from \"../Redux/store\";\r\nimport {setNewMaxValueAC, setNewMinValueAC, SettingStateType} from \"../Redux/counterSetting-reducer\";\r\n\r\nexport const Counter = () => {\r\n    console.log(\"Counter renders\")\r\n\r\n    const dispatch: Dispatch<any> = useDispatch()\r\n\r\n    const {newMaxValue, newMinValue} = useSelector<AppStateType, SettingStateType>(state => state.counterSettingReducer)\r\n    const {\r\n        maxValue,\r\n        minValue,\r\n        currentValue\r\n    } = useSelector<AppStateType, CounterStateType>(state => state.counterReducer)\r\n\r\n    const [isSaved, setIsSaved] = useState<boolean>(false)\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const increment = () => {\r\n        if (currentValue !== undefined) {\r\n            const newValue = currentValue + 1\r\n            dispatch(setCurrentValueAC(newValue))\r\n        }\r\n    }\r\n    const reset = () => dispatch(setCurrentValueAC(minValue))\r\n\r\n    const setMax = (value: number) => {\r\n        dispatch(setNewMaxValueAC(value))\r\n        if (isSaved) setIsSaved(false)\r\n        setError('enter values and press \"set\"')\r\n    }\r\n    const setMin = (value: number) => {\r\n        dispatch(setNewMinValueAC(value))\r\n        if (isSaved) setIsSaved(false)\r\n        setError('enter values and press \"set\"')\r\n    }\r\n\r\n    const setValues = () => {\r\n        const max = newMaxValue === undefined ? maxValue === undefined ? 5 : maxValue : newMaxValue\r\n        const min = newMinValue === undefined ? minValue === undefined ? 0 : minValue : newMinValue\r\n        const newCounterValues = {max, min}\r\n        console.log(newCounterValues)\r\n\r\n        localStorage.setItem(\"counterValues\", JSON.stringify(newCounterValues))\r\n        dispatch(setCounterValuesAC(newCounterValues.max, newCounterValues.min))\r\n        dispatch(setCurrentValueAC(newCounterValues.min))\r\n\r\n        setError('')\r\n        setIsSaved(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let valueAsString = localStorage.getItem(\"counterValues\")\r\n        if (valueAsString) {\r\n            let newValues = JSON.parse(valueAsString)\r\n\r\n            dispatch(setCounterValuesAC(newValues.max, newValues.min))\r\n            dispatch(setCurrentValueAC(newValues.min))\r\n            dispatch(setNewMaxValueAC(newValues.max))\r\n            dispatch(setNewMinValueAC(newValues.min))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (newMaxValue <= newMinValue || newMinValue < 0) {\r\n            setError('Incorrect value!')\r\n            setIsSaved(true)\r\n        }\r\n    }, [newMaxValue, newMinValue])\r\n\r\n    const disableInc = () => currentValue === maxValue || !!error\r\n    const disableReset = () => currentValue === minValue || !!error\r\n    const disableSet = () => isSaved\r\n\r\n    return <div className={s.counterWithSettings}>\r\n        <div className={s.counter}>\r\n            <DisplayWithSettings setMax={setMax}\r\n                                 setMin={setMin}\r\n            />\r\n            <div className={s.controls}>\r\n                <Control title=\"Set\"\r\n                         count={currentValue}\r\n                         action={setValues}\r\n                         setDisabled={disableSet}/>\r\n            </div>\r\n        </div>\r\n\r\n        <div className={s.counter}>\r\n            <Display count={currentValue}\r\n                     maxValue={maxValue}\r\n                     error={error}\r\n            />\r\n\r\n            <div className={s.controls}>\r\n                <Control title=\"Inc\"\r\n                         count={currentValue}\r\n                         action={increment}\r\n                         setDisabled={disableInc}/>\r\n\r\n                <Control title=\"Reset\"\r\n                         count={currentValue}\r\n                         action={reset}\r\n                         setDisabled={disableReset}/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\nimport {Counter} from \"./Counter/Counter\";\nimport \"./App.scss\"\n\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Counter/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {counterReducer} from \"./counter-reducer\";\r\nimport { combineReducers,createStore, applyMiddleware} from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport {counterSettingReducer} from \"./counterSetting-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n   counterReducer,\r\n   counterSettingReducer\r\n})\r\n\r\nconst store=createStore(rootReducer,applyMiddleware(thunk))\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWithSettings\":\"Counter_counterWithSettings__35Xbr\",\"counter\":\"Counter_counter__3lf7g\",\"controls\":\"Counter_controls__mbamk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2SfNi\",\"error\":\"Display_error__3idG2\",\"errorMessage\":\"Display_errorMessage__3Ap_Y\"};"],"sourceRoot":""}
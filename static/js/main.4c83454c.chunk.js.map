{"version":3,"sources":["Counter/Counter.module.scss","Counter/Display/Display.module.scss","Counter/Control/Control.module.scss","Counter/DisplayWithSettings/DisplayWithSettings.module.scss","Counter/Input/Input.module.scss","Counter/Display/Display.tsx","Counter/Control/Control.tsx","Counter/Input/Input.tsx","Counter/DisplayWithSettings/DisplayWithSettings.tsx","Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","className","s","display","error","errorMessage","count","maxValue","Control","onClick","action","disabled","setDisabled","control","title","Input","setting","label","type","onChange","e","Number","currentTarget","value","DisplayWithSettings","setMax","setMin","minValue","Counter","useState","counterValues","setCounterValues","newCounterValues","setNewCounterValues","saveValues","setSaveValues","setCount","setError","useEffect","valueAsString","localStorage","getItem","newValues","JSON","parse","console","log","counterWithSettings","counter","controls","setItem","stringify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c83454c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWithSettings\":\"Counter_counterWithSettings__35Xbr\",\"counter\":\"Counter_counter__3lf7g\",\"controls\":\"Counter_controls__mbamk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2SfNi\",\"error\":\"Display_error__3idG2\",\"errorMessage\":\"Display_errorMessage__3Ap_Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"Control_control__VL0ah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"DisplayWithSettings_display__7_v13\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setting\":\"Input_setting__39zWR\"};","import React from \"react\";\r\nimport s from \"./Display.module.scss\"\r\n\r\nexport type DisplayPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    error: string\r\n}\r\nexport const Display = (props: DisplayPropsType) => {\r\n    return <div className={s.display}>\r\n        {props.error\r\n            ? <div className={s.errorMessage}>{props.error}</div>\r\n            : <div className={props.count === props.maxValue ? s.error : \"\"}>{props.count}</div>\r\n        }\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from \"./Control.module.scss\"\r\n\r\nexport type ControlPropsType = {\r\n    title: string\r\n    count: number\r\n    action: () => void\r\n    setDisabled: () => boolean\r\n}\r\nexport const Control = (props: ControlPropsType) => {\r\n\r\n    return <div>\r\n        <button onClick={props.action}\r\n                disabled={props.setDisabled()}\r\n                className={s.control}>\r\n            {props.title}\r\n        </button>\r\n    </div>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './Input.module.scss'\r\n\r\ntype InputPropsType={\r\n    label:string\r\n    onChange:(value:number)=>void\r\n    value:number\r\n}\r\nconst Input = (props:InputPropsType) => {\r\n    const onChangeHandler=(e:ChangeEvent<HTMLInputElement>)=>props.onChange(Number(e.currentTarget.value))\r\n\r\n    return (\r\n        <div className={s.setting}>\r\n            <span>{props.label}</span>\r\n            <input type=\"number\"\r\n            onChange={onChangeHandler}\r\n            value={props.value}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\nimport s from './DisplayWithSettings.module.scss'\r\n\r\nimport Input from \"../Input/Input\";\r\n\r\ntype DisplayWithSettingsPropsType = {\r\n    setMax: (max: number) => void\r\n    setMin: (min: number) => void\r\n    maxValue: number\r\n    minValue: number\r\n}\r\nconst DisplayWithSettings = (props: DisplayWithSettingsPropsType) => {\r\n    return (\r\n        <div className={s.display}>\r\n            <Input label=\"max value:\"\r\n                   onChange={props.setMax}\r\n                   value={props.maxValue}\r\n            />\r\n            <Input label=\"min value:\"\r\n                   onChange={props.setMin}\r\n                   value={props.minValue}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayWithSettings;","import React, {useEffect, useState} from \"react\";\r\nimport {Display} from \"./Display/Display\";\r\nimport s from \"./Counter.module.scss\"\r\nimport {Control} from \"./Control/Control\";\r\nimport DisplayWithSettings from \"./DisplayWithSettings/DisplayWithSettings\";\r\n\r\nexport type CounterValuesType = {\r\n    maxValue: number\r\n    minValue: number\r\n}\r\nexport const Counter = () => {\r\n    const [counterValues, setCounterValues] = useState<CounterValuesType>({\r\n        maxValue: 5,\r\n        minValue: 0\r\n    })\r\n    const [newCounterValues, setNewCounterValues] = useState<CounterValuesType>({\r\n        maxValue: 5,\r\n        minValue: 0\r\n    })\r\n    const [saveValues, setSaveValues] = useState<boolean>(false)\r\n    const [count, setCount] = useState<number>(counterValues.minValue)\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const increment = () => setCount(count + 1)\r\n    const reset = () => setCount(counterValues.minValue)\r\n\r\n    const setMax = (value: number) => {\r\n        setNewCounterValues({...newCounterValues, maxValue: value})\r\n        setSaveValues(false)\r\n        setError('enter values and press \"set\"')\r\n    }\r\n    const setMin = (value: number) => {\r\n        setNewCounterValues({...newCounterValues, minValue: value})\r\n        setSaveValues(false)\r\n        setError('enter values and press \"set\"')\r\n    }\r\n\r\n    const setValues = () => {\r\n        localStorage.setItem(\"counterValues\", JSON.stringify(newCounterValues))\r\n        setCounterValues(newCounterValues)\r\n        setCount(newCounterValues.minValue)\r\n        setError('')\r\n        setSaveValues(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        let valueAsString = localStorage.getItem(\"counterValues\")\r\n        if (valueAsString) {\r\n            let newValues = JSON.parse(valueAsString)\r\n            console.log(newValues)\r\n            setNewCounterValues(newValues)\r\n            setCount(newValues.minValue)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (newCounterValues.maxValue <= newCounterValues.minValue || newCounterValues.minValue < 0) {\r\n            setError('Incorrect value!')\r\n            setSaveValues(true)\r\n        }\r\n    }, [newCounterValues])\r\n\r\n    const disableInc = () => {\r\n        return count === counterValues.maxValue\r\n    }\r\n\r\n    const disableReset = () => {\r\n        return count === counterValues.minValue\r\n    }\r\n\r\n    const disableSet = () => saveValues\r\n\r\n    return <div className={s.counterWithSettings}>\r\n        <div className={s.counter}>\r\n            <DisplayWithSettings setMax={setMax}\r\n                                 setMin={setMin}\r\n                                 maxValue={newCounterValues.maxValue}\r\n                                 minValue={newCounterValues.minValue}/>\r\n            <div className={s.controls}>\r\n                <Control title=\"Set\"\r\n                         count={count}\r\n                         action={setValues}\r\n                         setDisabled={disableSet}/>\r\n            </div>\r\n        </div>\r\n\r\n        <div className={s.counter}>\r\n            <Display count={count}\r\n                     maxValue={counterValues.maxValue}\r\n                     error={error}\r\n            />\r\n\r\n            <div className={s.controls}>\r\n                <Control title=\"Inc\"\r\n                         count={count}\r\n                         action={increment}\r\n                         setDisabled={disableInc}/>\r\n\r\n                <Control title=\"Reset\"\r\n                         count={count}\r\n                         action={reset}\r\n                         setDisabled={disableReset}/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\nimport {Counter} from \"./Counter/Counter\";\nimport \"./App.scss\"\n\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Counter/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}